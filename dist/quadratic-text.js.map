{"version":3,"sources":["quadratic-text.ts"],"names":[],"mappings":"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","file":"quadratic-text.js","sourcesContent":["///<reference path=\"../typings/index.d.ts\" />\r\n\r\n\r\nclass Point {\r\n  constructor(public x: number, public y: number) {\r\n  }\r\n\r\n  public distance(p: Point) {\r\n    return Math.sqrt(Math.pow(this.x - p.x, 2) + Math.pow(this.y - p.y, 2));\r\n  }\r\n}\r\n\r\ninterface QuadraticTextOptions {\r\n  canvas?: string;\r\n  curveStart?: Point;\r\n  curveEnd?: Point;\r\n  control?: Point;\r\n  text?: string;\r\n  font?: string;\r\n  textColor?: string;\r\n  curveColor?: string;\r\n  align?: string;\r\n}\r\n\r\nclass QuadraticText {\r\n  private canvas;\r\n  private context;\r\n  private points: Array<Point>;\r\n\r\n  private options: QuadraticTextOptions = {\r\n    canvas: 'canvas',\r\n    curveStart: new Point(20, 50),\r\n    curveEnd: new Point(280, 50),\r\n    control: new Point(150, 150),\r\n    text: 'Hello Quadratic Text!',\r\n    font: '24px Arial',\r\n    textColor: 'black',\r\n    curveColor: 'transparent',\r\n    align: 'left'\r\n  };\r\n\r\n  constructor(options: QuadraticTextOptions) {\r\n    $.extend(this.options, options);\r\n    this.canvas = $(this.options.canvas);\r\n    this.context = this.canvas.get(0).getContext(\"2d\");\r\n    this.drawCurve();\r\n    this.drawText();\r\n  }\r\n\r\n  public setText(text: string) {\r\n    this.options.text = text;\r\n    this.redrawText();\r\n  }\r\n\r\n  public addText(text: string) {\r\n    this.options.text = text;\r\n    this.drawText();\r\n  }\r\n\r\n\r\n  private redrawText() {\r\n    this.context.clearRect(0, 0, 500, 500);\r\n    this.drawCurve();\r\n    this.drawText();\r\n  }\r\n\r\n\r\n  private drawCurve() {\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.options.curveStart.x, this.options.curveStart.y);\r\n    this.context.quadraticCurveTo(this.options.control.x, this.options.control.y, this.options.curveEnd.x, this.options.curveEnd.y);\r\n    this.context.strokeStyle = this.options.curveColor;\r\n    this.context.fillStyle = this.options.textColor;\r\n    this.context.font = this.options.font;\r\n    this.context.textBaseline = 'bottom';\r\n    this.context.stroke();\r\n    this.points = [];\r\n    for (let i = 0; i < 500; i++) {\r\n      let point = this.getPoint(.002 * i);\r\n      this.points.push(point);\r\n    }\r\n  }\r\n\r\n  private getPoint(t: number) {\r\n    let x = (1 - t) * (1 - t) * this.options.curveStart.x + 2 * (1 - t) * t * this.options.control.x + t * t * this.options.curveEnd.x;\r\n    let y = (1 - t) * (1 - t) * this.options.curveStart.y + 2 * (1 - t) * t * this.options.control.y + t * t * this.options.curveEnd.y;\r\n    return new Point(x, y);\r\n  }\r\n\r\n  private getNextPoint(point, charWidth) {\r\n    let i = this.points.indexOf(point);\r\n    while (i < this.points.length) {\r\n      let distance = this.points[i].distance(point);\r\n      if (distance >= charWidth) {\r\n        return this.points[i - 1];\r\n      }\r\n      i++;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private alignCenter() {\r\n    let curveLength = this.getCurveLength();\r\n    let textLength = this.context.measureText(this.options.text).width;\r\n    let point = this.points[0];\r\n    if (curveLength <= textLength)\r\n      return point;\r\n    point = this.getNextPoint(point, (curveLength - textLength) / 2);\r\n    return point;\r\n  }\r\n\r\n  private drawText() {\r\n    let textLen = this.options.text.length;\r\n    let point = this.points[0];\r\n    if (this.options.align == 'center')\r\n      point = this.alignCenter();\r\n    for (let i = 0; i < textLen; i++) {\r\n      point = this.drawRotatedChar(this.options.text[i], point);\r\n      if (point == null)\r\n        return;\r\n    }\r\n  }\r\n\r\n  private drawRotatedChar(char, point) {\r\n    if (point) {\r\n      let point1 = point;\r\n      let point2 = this.getNextPoint(point, this.context.measureText(char).width);\r\n      if (point2) {\r\n        let alpha = -this.getAlpha(point1, point2);\r\n        if (point1.x > point2.x) {\r\n          alpha = Math.PI - alpha;\r\n        }\r\n        this.context.save();\r\n        this.context.translate(point1.x, point1.y);\r\n        this.context.rotate(alpha);\r\n        this.context.fillText(char, 0, 0);\r\n        this.context.restore();\r\n        return point2;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private getAlpha(point1: Point, point2: Point) {\r\n    if (point2 == null) {\r\n      console.log('l:', point1)\r\n    }\r\n    let a = point1.y - point2.y;\r\n    let b = point1.x - point2.x;\r\n    let alpha = Math.asin(a / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));\r\n    return alpha;\r\n  }\r\n\r\n  //thx tunght13488, https://gist.github.com/tunght13488/6744e77c242cc7a94859 \r\n  private getCurveLength() {\r\n    let a = new Point(\r\n      this.options.curveStart.x - 2 * this.options.control.x + this.options.curveEnd.x,\r\n      this.options.curveStart.y - 2 * this.options.control.y + this.options.curveEnd.y\r\n    );\r\n    let b = new Point(\r\n      2 * this.options.control.x - 2 * this.options.curveStart.x,\r\n      2 * this.options.control.y - 2 * this.options.curveStart.y\r\n    );\r\n    let A = 4 * (a.x * a.x + a.y * a.y);\r\n    let B = 4 * (a.x * b.x + a.y * b.y);\r\n    let C = b.x * b.x + b.y * b.y;\r\n\r\n    let Sabc = 2 * Math.sqrt(A + B + C);\r\n    let A_2 = Math.sqrt(A);\r\n    let A_32 = 2 * A * A_2;\r\n    let C_2 = 2 * Math.sqrt(C);\r\n    let BA = B / A_2;\r\n\r\n    return (A_32 * Sabc + A_2 * B * (Sabc - C_2) + (4 * C * A - B * B) * Math.log((2 * A_2 + BA + Sabc) / (BA + C_2))) / (4 * A_32);\r\n  }\r\n\r\n\r\n}\r\n"]}